<%@ WebHandler Language="C#" Class="DemoPrintFileWithPwdProtectionHandler" %>

using System;
using System.Web;

using Neodynamic.SDK.Web;

public class DemoPrintFileWithPwdProtectionHandler : IHttpHandler
{

    /*############### IMPORTANT!!! ############
    If your website requires AUTHENTICATION, then you MUST configure THIS Handler file
    to be ANONYMOUS access allowed!!!
      ######################################### */

    public void ProcessRequest(HttpContext context)
    {

        if (WebClientPrint.ProcessPrintJob(context.Request.Url.Query))
        {
            bool useDefaultPrinter = (context.Request["useDefaultPrinter"] == "checked");
            string printerName = context.Server.UrlDecode(context.Request["printerName"]);

            string fileType = context.Request["filetype"];

            string fileName = Guid.NewGuid().ToString("N") + "." + fileType;
            string filePath = null;

            switch (fileType)
            {
                case "PDF":
                    filePath = "~/files/LoremIpsum-PasswordProtected.pdf";
                    break;
                case "DOC":
                    filePath = "~/files/LoremIpsum-PasswordProtected.doc";
                    break;
                case "XLS":
                    filePath = "~/files/SampleSheet-PasswordProtected.xls";
                    break;
            }

            if (filePath != null)
            {


                //get and set the RSA pub key generated by WCPP Client Utility 
                string publicKeyBase64 = context.Request["wcp_pub_key_base64"];
                string publicKeySignatureBase64 = context.Request["wcp_pub_key_signature_base64"];

                if (string.IsNullOrEmpty(publicKeyBase64))
                {
                    context.Response.StatusCode = 400;
                    context.Response.ContentType = "text/plain";
                    context.Response.Write("No public key provided.");
                }
                else
                {
                    
                    //ALL the test files are protected with the same password for demo purposes 
                    //This password will be encrypted and stored in file metadata
                    string plainTextPassword = "ABC123";

                    //create print file with password protection
                    PrintFile file = null;

                    if (fileType == "PDF")
                    {
                        file = new PrintFilePDF(context.Server.MapPath(filePath), fileName);
                        ((PrintFilePDF)file).Password = plainTextPassword;
                        //((PrintFilePDF)file).PrintRotation = PrintRotation.None;
                        //((PrintFilePDF)file).PagesRange = "1,2,3,10-15";
                        //((PrintFilePDF)file).PrintAnnotations = true;
                        //((PrintFilePDF)file).PrintAsGrayscale = true;
                        //((PrintFilePDF)file).PrintInReverseOrder = true;

                    }
                    else if (fileType == "DOC")
                    {
                        file = new PrintFileDOC(context.Server.MapPath(filePath), fileName);
                        ((PrintFileDOC)file).Password = plainTextPassword;
                        //((PrintFileDOC)file).PagesRange = "1,2,3,10-15";
                        //((PrintFileDOC)file).PrintInReverseOrder = true;
                    }
                    else if (fileType == "XLS")
                    {
                        file = new PrintFileXLS(context.Server.MapPath(filePath), fileName);
                        ((PrintFileXLS)file).Password = plainTextPassword;
                        //((PrintFileXLS)file).PagesFrom = 1;
                        //((PrintFileXLS)file).PagesTo = 3;
                    }

                    //create an encryption metadata to set to the PrintFile
                    EncryptMetadata encMetadata = new EncryptMetadata(publicKeyBase64, publicKeySignatureBase64);

                    //set encyption metadata to PrintFile to ENCRYPT the Password to unlock the file
                    file.EncryptMetadata = encMetadata;

                    //create ClientPrintJob for printing encrypted file
                    ClientPrintJob cpj = new ClientPrintJob();
                    cpj.PrintFile = file;
                    if (useDefaultPrinter || printerName == "null")
                        cpj.ClientPrinter = new DefaultPrinter();
                    else
                        cpj.ClientPrinter = new InstalledPrinter(printerName);

                    context.Response.ContentType = "application/octet-stream";
                    //set the ClientPrintJob content
                    context.Response.BinaryWrite(cpj.GetContent());
                    
                    context.Response.End();


                }

            }


        }
        else
        {
            context.Response.StatusCode = 400;
            context.Response.ContentType = "text/plain";
            context.Response.Write(context.Request.Url.Query);
            context.Response.End();
        }

    }

    public bool IsReusable
    {
        get
        {
            return false;
        }
    }

}